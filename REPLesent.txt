| \*Cheaper than \gFree\s

Today we're going to talk about how to get
referential transparency on the cheap.

First, let's remind ourselves of what
"referential transparency" is.
From the Red Book:

"An expression \ge\s is \rreferentially\s
\rtransparent\s if for all programs \gp\s,
every occurrence of \ge\s in \gp\s can be
replaced with the result of evaluating \ge\s
without changing the result of evaluating \gp\s."

"A function \gf\s is \rpure\s if the expression
\gf(x)\s is referentially transparent for all
referentially transparent \gx\s."
---
| \*Why do we care?\s

One of our professional responsibilities is to
understand our code. (Besides, who \_doesn't\s
want to understand their code?) Referential
transparency lets us use a particularly simple
approach to understanding, called the
\r"substitution model of evaluation."\s
---
| \*The Substitution Model of Evaluation\s

Let's start with the simplest kind of example:

```
val twelve = 7 + 5
val fortyFive = 9 * 5
```

Even without the names, you'd have no trouble
figuring out what these values are. You learned
them when you were 10 or 11. You can \gsubstitute\s
12 or 45 for 7 + 5 or 9 * 5 anytime, anywhere.
---
| \*Expressions\s

It's probably worth pointing out that 7 + 5 and
9 * 5 are \rexpressions\s. They \rreduce\s to some
more simple form. Again, you probably don't even
think about this, or need to, for arithetic, but 
let's keep it in mind for later. More generally,
everything but \gimport\s is an expression that
evaluates to a \gresult\s.

Now let's dig a little deeper into expressions and
referential transparency.
---
| \*Methods\s

Let's generalize a bit:

```
def add5(i: Int): Int = i + 5
def multiplyBy5(i: Int): Int = i * 5
```

No matter what value \gi\s has, we can use the same
approach to understanding this code as before. Now
let's do both:

```
def add5AndThenMultiplyBy5(i: Int): Int = multiplyBy5(add5(i))

add5AndThenMultiplyBy5(7)
```

Still pretty easy to understand.
\rQuestion:\s Can we approach this another way?
---
| \*Refactoring\s

How about:

```
val add5AndThenMultiplyBy5: Int => Int = add5 _ andThen multiplyBy5 _

add5AndThenMultiplyBy5(7)
```

This is notably different: the code says what it does as clearly
as its name does. Its type makes clear that it transforms an
\gInt\s to an \gInt\s. But it looks like we're transforming two
functions to another function. And so we are. \gandThen\s is a
\rcombinator\s. A combinator is a function that takes functions as
arguments and returns a function as a result. That is, it \rcombines\s
functions. Note that we have to use "η-expansion" (sorry, but it's
standard λ calculus terminology) to turn a method made with \gdef\s into
a function, since \gandThen\s is available on functions, not methods.
---
| \*Programs as Values\s

Another thing that's different about

```
val add5AndThenMultiplyBy5: Int => Int = add5 _ andThen multiplyBy5 _
```

is that it's a \gval\s. First-class functions are perfectly good values,
and because combinators transform function values to other function values,
functional programming, ironically, might be called \_consistently value-\s
\_oriented programming\s instead. Note that there's no mention of arguments in
this version of \gadd5AndThenMultiplyBy5\s. We're not actually "doing a
computation." We're \_describing\s a computation that will be done later,
when we provide an \gInt\s. More importantly, we can reason about this
version more easily: we understand \gadd5\s by itself by the substitution
model; we understand \gmultiplyBy5\s by itself by the substitution model;
we understand \gadd5AndThenMultiplyBy5\s by the substitution model. We
can reason about the previous version the same way; it's just that, with
a bit of experience, this version becomes easier to read (it echoes the
name!) and is more general: \gandThen\s doesn't care about the functions'
arguments or their types. It only cares that the type of the result of the
first function is the same as the type of the argument of the second.
---
| \* Referential Opacity\s

By contrast, consider:

```
val hi: Unit = println("Hello, world!")
```

The fact that \ghi\s has type \gUnit\s rather than \gString\s gives the
game away, but we can run the code to prove the point: if our \_intent\s
is to put "Hello, world!" out to the world, well, that happens... once,
and \_it happens when we define the \gval\s. What happens when we use the
\gval\s in the rest of the program? Nothing (\gUnit\s). This is why it's
called a \_side\s-effect: we get a value (of type \gUnit\s) and, as a
side-effect, something is printed to the console. So we need some means of
representing effects as values, too. It turns out, in scalaz, there's a
very flexible way to do that: \gTask\s.
---
| \*\gTask\s \*Master\s

Let's get this out of the way: \gTask\s is a \gMonad\s. A big one. You can
construct one with a pure value or an expression, including an expression
that can \gthrow\s.

```
import scalaz.concurrent.Task

val fortyTwo = Task.now(42)
val hi = Task.delay(println("Hello, world!"))
```

The default constructor behaves like \gTask.delay\s, but when the \gTask\s
runs, it will run on a thread taken from the provided \gExecutorService\s,
or \gscalaz.concurrent.Strategy.DefaultExecutorService\s if none is provided.

```
val newHi = Task(println("Hello, world!"))
```

Can we do stuff like we did with functions-as-values now? Yes, we can!

```
import scalaz.syntax.monad._

val meet = Task.delay {
  print("What is your name? ")
  readLine
}

val greet = (n: String) => Task.delay(println(s"Hi there, $n!"))

val meetAndGreet = meet >>= greet
```

\g>>=\s is another name for \gflatMap\s, so:

```
val fmg = meet flatMap greet
```

or

```
val cmg = for {
  n <- meet
  _ <- greet(n)
} yield ()
```
---
| \*Run, run, run, run... (h/t Pink Floyd)\s

OK, so we can build up these values that somehow
capture effects both in ways that are familar,
like \gflatMap\s and \gfor-comprehensions\s, and
less familiar ways, like \g>>=\s. How do we \_run\s
one of these values?

```
meetAndGreet.unsafePerformSync
```

Both "unsafe" and "sync" should be taken seriously:
Unsafe, because we sacrifice referential transparency
at this point; \gSync\s, because this will block the current thread
until the result is available.

Ultimately, we're shooting for a referentially transparent
application, so we shouldn't run \gTask\ss. We should let
"the runtime" do that, by making our app extend \gTaskApp\s.

```
import scalaz.concurrent.TaskApp

object App extends TaskApp {
  override def runc = meetAndGreet
}
```

http4s services should similarly use \gServerApp\s to construct and
bind the HTTP server. Routes can construct \gResponse\ss from \gTask\ss
with no fuss, e.g. \gOk(Task.now(Foo("Paul").asJson))\s. If you're using
Doobie for database access, this is especially nice; it's reasonable to
say, e.g. \gOk(myQuery.list.transact(xa).map(_.asJson))\s to return the
results of \gmyQuery\s, assuming \gxa\s is a \gTransactor[Task]\s.
---
| \*All Together Now!\s

I haven't talked much about concurrency with \gTask\s, even though it's in
the \gscalaz.concurrent\s package and I mentioned that you can construct
\gTask\ss that run on separate threads. Thankfully, it's easy to do things
with multiple \gTask\s:

```
import scalaz.Nondeterminism

val one   = Task { println("1"); 1 }
val two   = Task { println("2"); 2 }
val three = Task { println("3"); 3 }
val all   = List(one, two, three)

val u = Nondeterminism[Task].gatherUnordered(all)
val o = Nondeterminism[Task].gather(all)
```

Keep in mind that \gNondeterminism\s only \_starts\s
\gTask\ss nondeterministically, so if you construct
your \gTask\ss with \gnow\s or \gdelay\s, you'll get
deterministic behavior, because each \gTask\s will run
to completion on the current thread. In other words,
\gNondeterminism\s can't change a \gTask\s's concurrency
\gStrategy\s.
---
| \*Why do mathematicians have such weird names?\s

In the beginning, I talked about functions and \gandThen\s.
Monads like \gTask\s muddy the waters a little, because a
\gTask\s itself isn't a function. But what about

```
val greet = (n: String) => Task.delay(println(s"Hi there, $n!"))
```

It's a function. It's referentially transparent. But we can only
use \gflatMap\s on the \gTask\s itself, and there's no \gandThen\s.

Or is there?

```
import scalaz.Kleisli
import scalaz.syntax.kleisli._

val meetK  = meet.liftKleisli[Unit]      // If we have a M[B], specify A (Unit)
val greetK = Kleisli(greet)              // If we have an A => M[B], here a String => Task[Unit]

val mgK = meetK andThen greetK
```

Kleisli composition is to \gMonad\sic functions as function
composition is to functions.
---
| \*Kleisli as Reader Monad\s

On one hand, \gKleisli\s is just another representation of
A => M[B]. On the other, it turns out a \gKleisli\s is
whatever its M is. That is, because \gTask\s is a \gMonad\s,
so is \gKleisli[Task, ?, ?]\s, so it can be used in contexts
supporting \gMonad\ss, just as \gTask\ss can. More broadly,
\gKleisli\s is helpful for supporting functions that need some
context in order to construct a \gMonad\sic result. For example:

```
type Config(xa: Transactor[Task], ...)
type ApplicationK[B] = Kleisli[Task, Config, B]

def lookupUser(id: String): ApplicationK[Option[User]] = Kleisli { cfg =>
  sql"...".query[User].option.transact(cfg.xa)
}
```

To actually perform a Doobie query and get a \gTask\s, you need a
\gTransactor\s. But a \gTransactor\s is a good example of the kind
of "global resource" that should be acquired at app startup and kept
in the app's config. Our persistence code needs access to it at some
point, but it would be awkward or impossible (in some contexts) to
pass it to the relevant function. Instead, we can return the Kleisli,
which we can do anything with that we can do with any \gMonad\s, and
pass the \gConfig\s in only when we actually must have the \gTask\s,
e.g. in the app where loading the config meets serving the business
logic.